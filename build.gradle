

buildscript {
    dependencies {
        classpath "com.android.tools.build:gradle:4.0.0-alpha09"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${Versions.kotlin}"
        classpath "org.jetbrains.kotlin:kotlin-serialization:${Versions.kotlin}"
    }

    repositories {
        google()
        jcenter()
        maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://dl.bintray.com/kotlin/kotlin-dev" }
        maven { url "https://kotlin.bintray.com/kotlinx" }
        maven { url "https://dl.bintray.com/kotlin/kotlinx/" }
        maven { url "https://dl.bintray.com/jetbrains/kotlin-native-dependencies" }
    }
}

plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.3.40'
    id "base"
    id "maven-publish"
}

allprojects {
    repositories {
        google()
        jcenter()
        mavenCentral()
        maven { url "https://dl.bintray.com/kotlin/kotlinx.html" }
        maven { url "https://dl.bintray.com/kotlin/ktor" }
        maven { url "https://dl.bintray.com/kotlin/kotlinx/" }
        maven { url "https://kotlin.bintray.com/kotlinx" }
        maven { url "https://kotlin.bintray.com/kotlin-dev" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://ci.android.com/builds/submitted/6116482/androidx_snapshot/latest/repository/" }
    }
}

apply plugin: 'com.jfrog.bintray'

def GROUP_ID="co.joebirch"
def ARTIFACT_ID="firebase_auth_multiplatform"

def BINTRAY_REPOSITORY="joebirch"
def BINTRAY_ORGINIZATION="joebirch"

def ISSUE_URL="https://github.com/hitherejoe/firebase_auth_multiplatform/issues"
def SITE_URL="https://github.com/hitherejoe/firebase_auth_multiplatform"
def VCS_URL="https://github.com/hitherejoe/firebase_auth_multiplatform.git"
def LIBRARY_VERSION_NAME=0.3

repositories {
    jcenter()
    mavenCentral()
}

group GROUP_ID
version LIBRARY_VERSION_NAME

afterEvaluate {
    project.publishing.publications.all {
        // rename artifacts
        groupId = GROUP_ID
        if (it.name.contains('metadata')) {
            artifactId = "$ARTIFACT_ID"
        } else {
            artifactId = "$ARTIFACT_ID-$name"
        }
    }
}

def getBintrayUserProperty() {
    return hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
}

def getBintrayApiKeyProperty() {
    return hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
}

bintray {
    print(getBintrayApiKeyProperty())
    user = getBintrayUserProperty()
    key = getBintrayApiKeyProperty()
    publish = false

    pkg {
        repo = BINTRAY_REPOSITORY
        name = ARTIFACT_ID
        userOrg = BINTRAY_ORGINIZATION
        licenses = ['MIT']
        vcsUrl = VCS_URL
        websiteUrl = SITE_URL
        issueTrackerUrl = ISSUE_URL

        version {
            name = LIBRARY_VERSION_NAME
            vcsTag = LIBRARY_VERSION_NAME
            released = new Date()
        }
    }
}

bintrayUpload.doFirst {
    publications = publishing.publications.collect {
        it.name
    }.findAll {
        it != "kotlinMultiplatform"
    }
}

bintrayUpload.dependsOn publishToMavenLocal